;;; .emacs --- Init file for Emacs                  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 Xavier Maillard

;; Author: Xavier Maillard <x@maillard.im>
;; Keywords: vanilla, emacs

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.q

;;; Commentary:

;; Stay as much as possible to vanilla.
;;
;; Exceptions:
;;   - Howm mode for life and not taking (Am I say how much I dislike Org ?)
;;   - Various modules by Prot

;;; Code:

;; REQUIRES ;;

(require 'package)
(require 'vc)

;; BASICS
;;; Load recurisvely all directories containing .el files under `user-emacs-directory'/elisp
(let* ((path (expand-file-name "elisp" user-emacs-directory))
         (local-pkgs (mapcar 'file-name-directory (directory-files-recursively path "\\.el$"))))
    (if (file-accessible-directory-p path)
        (mapc (apply-partially 'add-to-list 'load-path) local-pkgs)
      (make-directory path :parents)))

;;; UI

;; I do not use graphical elements
(menu-bar-mode -1) ; Clean up UI
(tool-bar-mode -1)
(scroll-bar-mode -1)

(ido-mode)
(ido-everywhere)

(column-number-mode)
(show-paren-mode)
(global-hl-line-mode t)

;;; Prot is in Da Place (thank you Prot!!)
(setq custom-safe-themes t)
(load-theme 'modus-operandi-tinted)

;; pulsar: https://protesilaos.com/emacs/pulsar
(require 'pulsar)
(setopt pulsar-pulse t
          pulsar-delay 0.055
          pulsar-iterations 10
          pulsar-face 'pulsar-green
          pulsar-highlight-face 'pulsar-magenta)

(pulsar-global-mode 1)
(add-hook 'next-error-hook '(pulsar-pulse-line-red pulsar-recenter-top pulsar-reveal-entry))
(add-hook 'minibuffer-setup-hook 'pulsar-pulse-line-red)
(global-set-key (kbd "C-x l") 'pulsar-pulse-line)
(global-set-key (kbd "C-x L") 'pulsar-highlight-dwim)

;; lin: https://protesilaos.com/emacs/lin
(require 'lin)
(setq lin-face 'lin-cyan)
(add-hook 'after-init-hook 'lin-global-mode)

;;;; curosry: https://protesilaos.com/emacs/cursory
(require 'cursory)

;; Check the `cursory-presets' for how to set your own preset styles.

(setq cursory-latest-state-file
      (expand-file-name "~/.local/state/emacs/cursory-latest.state"))

;; Set last preset or fall back to desired style from `cursory-presets'.
(cursory-set-preset (or (cursory-restore-latest-preset) 'bar))

;; Arrange to keep track of the latest Cursory preset.
(cursory-mode 1)

;; We have to use the "point" mnemonic, because C-c c is often the
;; suggested binding for `org-capture'.
(define-key global-map (kbd "C-c p") #'cursory-set-preset)

;;; PACKAGE MANAGER
(package-initialize)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(when (< emacs-major-version 29)
  (unless (package-installed-p 'use-package)
    (unless package-archive-contents
      (package-refresh-contents))
    (package-install 'use-package)))


;;; OTHERS
(setq user-full-name "Xavier Maillard"
      user-mail-address "x@maillard.im"
      default-directory "~/"
      create-lockfiles nil
      inhibit-startup-screen t
      eshell-banner-message ""
      ido-auto-merge-work-directories-length -1 ; disable auto directory switching in IDO
      bookmark-save-flag 1 ; save bookmarks after every change/new bookmark
      ido-use-filename-at-point 'guess  ; Use find-file-at-point whenever theres a file at point
      inhibit-eol-conversion nil
      dired-dwim-target t  ; make dired target default to the next dired window (eg to copy files between windows)
      dired-isearch-filenames t  ; make isearch only search filenames in dired buffers
      dired-listing-switches "-al --group-directories-first"
      shr-discard-aria-hidden t  ; don't render "hidden" tags on webpages
      search-default-mode t) ; Default to regex search

; On Mac this is just a must-have
(setq mac-option-modifier 'none);control, meta, alt, super, or hyper (none = no interpretation)
(setq mac-command-modifier 'meta)

(fset 'yes-or-no-p 'y-or-n-p)
(define-key y-or-n-p-map [return] 'act)

;;; BACKUPS

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.local/share/emacs/backup"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t       ; use versioned backups
      auto-save-file-name-transforms '((".*" "~/.local/share/emacs/backup/" t)))

;;; POUBELLE

(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/") ; MacOS

;;; MAIL

(defvar my/rmail-folder (expand-file-name "~/.local/share/mail/"))
(defvar my/inmail-folder (expand-file-name "~/.local/share/mail/in/"))
(defvar my/dl-folder (expand-file-name "~/.local/cache/emacs/"))

(setq rmail-delete-after-output t)
(setq rmail-preserve-inbox nil)

(setq rmail-remote-password-required t)
(setq rmail-file-name (expand-file-name "inbox.rmail" my/inmail-folder))

;; Tricking the system
;; UGLY UGLY UGLY
(setq rmail-remote-password
 (let ((auth-info (car (auth-source-search ; I DO NOT LIKE THAT (that should be simpler)
                          :host "mail.galae.net" ; DO NOT EXPOSE THIS PLEASE
                          :max 1))))
   (when auth-info
     (let ((secret (plist-get auth-info :secret)))
       (if (functionp secret)
           (funcall secret)
         secret)))))
(setq rmail-displayed-headers "^\\(?:Cc\\|Date\\|From\\|Subject\\|To\\|Sender\\):")

;; (setq rmail-primary-inbox-list '("maildir://~/.local/share/mail/galae/INBOX"))

(setq rmail-mime-attachment-dirs-alist `((".*" ,my/dl-folder)))

(setq rmail-automatic-folder-directives	; Quelques rÃ¨gles de rangement automatique pour faire du Inbox 0 artisanal
      `((,(expand-file-name "xavier.rmail" my/inmail-folder) "to" "xavier@maillard.im")
	(,(expand-file-name "bug-gnu-emacs.rmail" my/inmail-folder) "sender" "bug-gnu-emacs-bounces")
	(,(expand-file-name "emacs-devel.rmail" my/inmail-folder) "sender" "emacs-devel-bounces")
	(,(expand-file-name "help-gnu-emacs.rmail" my/inmail-folder) "sender" "help-gnu-emacs-bounces")))

(setq rmail-secondary-file-directory (file-name-as-directory my/inmail-folder))
(setq rmail-secondary-file-regexp "^.*\\.rmail$")

(add-to-list 'auto-mode-alist '("\\.rmail$" . rmail-mode))

(global-set-key (kbd "C-c r") '(lambda ()
				 (interactive)
				 (let ((current-prefix-arg '(4)))
				   (call-interactively #'rmail))))
(global-set-key (kbd "C-c R") 'rmail)

;; TODO: mairix ?

; Simple et basique: msmtp fait le boulot. FIN
(setq send-mail-function 'sendmail-send-it)
(setq sendmail-program (executable-find "msmtp")) ;

;;; NOTES TAKING

(require 'howm)
(setq howm-view-use-grep t)
(setq howm-view-grep-command "rg")
(setq howm-view-grep-option "-nH --no-heading --color never")
(setq howm-view-grep-extended-option nil)
(setq howm-view-grep-fixed-option "-F")
(setq howm-view-grep-expr-option nil)
(setq howm-view-grep-file-stdin-option nil)
:config
;; Where to store data.
(setq howm-directory "~/Documents/howm")
(setq howm-home-directory howm-directory)


;; HOOKS

; Clean trailing whitespace before saving:
(add-to-list 'write-file-functions 'delete-trailing-whitespace)

(add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "E")))
(add-hook 'lisp-interaction-mode-hook (lambda () (setq mode-name "LI")))
(add-hook 'after-init-hook 'global-auto-revert-mode)
(add-hook 'after-init-hook 'delete-selection-mode)

;;; BINDINGS
(global-set-key (kbd "C-x C-c") nil) ;; Je fais trop d'erreurs...
(global-set-key (kbd "C-x C-c C-c") 'save-buffers-kill-emacs)
(global-set-key (kbd "C-x C-d") nil) ; never use it
(global-set-key (kbd "C-x C-v") nil) ; never use it
(global-set-key (kbd "C-z") nil) ; I have a window manager, thanks!
(global-set-key  (kbd "C-x C-z") nil) ; same idea as above
(global-set-key (kbd "C-x C-c") nil) ; avoid accidentally exiting Emacs

(global-set-key (kbd "C-x C-r") 'restart-emacs) ; override `find-file-read-only'
(global-set-key (kbd "C-h h") nil) ; Never show that "hello" file
(global-set-key (kbd "M-`") nil)
(global-set-key (kbd "M-o") 'delete-blank-lines) ; alias for C-x C-o
(global-set-key (kbd "M-SPC") 'cycle-spacing)
(global-set-key (kbd "M-z") 'zap-up-to-char) ; NOT `zap-to-char'
(global-set-key (kbd "M-c") 'capitalize-dwim)
(global-set-key (kbd "M-l")  'downcase-dwim) ; "lower" case
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-=") 'count-words)
(global-set-key (kbd "C-x O") 'next-multiframe-window)
(global-set-key (kbd "C-h K") 'describe-keymap) ; overrides `Info-goto-emacs-key-command-node'
(global-set-key (kbd "C-h u") 'apropos-user-option)
(global-set-key (kbd "C-h F") 'apropos-function) ; lower case is `describe-function'
(global-set-key (kbd "C-h V") 'apropos-variable) ; lower case is `describe-variable'
(global-set-key (kbd "C-h L") 'apropos-library) ; lower case is `view-lossage'
(global-set-key (kbd "C-h c") 'describe-char) ; overrides `describe-key-briefly'

;; FINAL
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(require 'server)
(setq server-client-instructions nil)
(unless (server-running-p)
  (server-start)))

;; (setq default-frame-alist '((width . 800) (height . 55) (menu-bar-lines . 1)))
