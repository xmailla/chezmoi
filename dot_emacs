;;; .emacs --- Init file for Emacs                  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 Xavier Maillard

;; Author: Xavier Maillard <x@maillard.im>
;; Keywords: vanilla, emacs

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.q

;;; Commentary:

;; Stay as much as possible to vanilla.
;;
;; Exceptions:
;;   - Howm mode for life and not taking (Am I say how much I dislike Org ?)
;;   - GNU Hyperbole
;;   - records-mode (j'en suis le mainteneur)
;;   - Various modules by Prot (but less and less)

;;; Code:

;; REQUIRES ;;

(require 'package)
(require 'vc)

(defgroup my nil
  "Ma configuration personnalisée."
  :group 'local)

(defcustom my/local-directory
  (expand-file-name "~/.local")
  "Répertoire de base pour de nombreux fichiers locaux (cache, états, mail, etc.)."
  :type 'directory
  :group 'my)

(defcustom my/emacs-directory
  (expand-file-name "emacs" my/local-directory)
  "Répertoire de base pour les fichiers emacs (hors configuration)."
  :type 'directory
  :group 'my)

(defcustom my/cache-directory
  (expand-file-name "cache" my/emacs-directory)
  "Répertoire utilisé par plusieurs paquets pour persister de la donnée."
  :type 'directory
  :group 'my)

(defcustom my/backup-directory
  (expand-file-name "backup" my/emacs-directory)
  "Répertoire utilisé par plusieurs paquets pour des sauvegardes."
  :type 'directory
  :group 'my)

(defcustom my/state-directory
  (expand-file-name "state" my/emacs-directory)
  "Répertoire utilisé par plusieurs paquets pour garder des fichiers d'états."
  :type 'directory
  :group 'my)

(defcustom my/mail-directory
  (expand-file-name "mail" "~/.local")
  "Répertoire utilisé pour le stockage des mails reçus/envoyés et tout ce qui touche aux mails de manière générale."
  :type 'directory
  :group 'my)

(defcustom my/inmail-directory
  (expand-file-name "in" my/mail-directory)
  "Répertoire utilisé pour le stockage des mails reçus."
  :type 'directory
  :group 'my)

(defcustom my/outmail-directory
  (expand-file-name "out" my/mail-directory)
  "Répertoire utilisé pour le stockage des mails envoyés."
  :type 'directory
  :group 'my)

(defcustom my/notes-directory
  (expand-file-name "notes" "~/Documents")
  "Répertoire utilisé pour le stockage des notes (howm, org, records, etc.)."
  :type 'directory
  :group 'my)

(defcustom my/chezmoi-directory
  (expand-file-name "chezmoi" "~/.local/share")
  "Répertoire utilisé pour la gestion de mes fichiers de configuration."
  :type 'directory
  :group 'my)



;; BASICS
;;; Load recurisvely all directories containing .el files under `user-emacs-directory'/elisp
(let* ((path (expand-file-name "elisp" user-emacs-directory))
       (local-pkgs (mapcar 'file-name-directory (directory-files-recursively path "\\.el$"))))
  (if (file-accessible-directory-p path)
      (mapc (apply-partially 'add-to-list 'load-path) local-pkgs)
    (make-directory path :parents)))

(when (< emacs-major-version 29)
  (unless (package-installed-p 'use-package)
    (unless package-archive-contents
      (package-refresh-contents))
    (package-install 'use-package)))

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Il est temps de se moderniser un tout petit peu :/
(use-package emacs
  :ensure t
  :demand t
  :custom
  (user-full-name "Xavier Maillard")
  (user-mail-address "x@maillard.im")
  (default-directory "~/" "On utilise $HOME pour tout")
  (create-lockfiles nil)

  ;; au démarrage, au plus court
  (inhibit-startup-screen t)
  (inhibit-startup-message t "I know I am ready")
  (inhibit-startup-echo-area-message t "Yep, still know it")
  (initial-scratch-message nil "I know it is the scratch buffer where I can write anything!")

  (eshell-banner-message "")
  (ido-auto-merge-work-directories-length -1) ; disable auto directory switching in IDO
  (bookmark-save-flag 1) ; save bookmarks after every change/new bookmark
  (ido-use-filename-at-point 'guess)  ; Use find-file-at-point whenever theres a file at point
  (inhibit-eol-conversion nil)
  (dired-dwim-target t)  ; make dired target default to the next dired window (eg to copy files between windows)
  (dired-isearch-filenames t)  ; make isearch only search filenames in dired buffers
  (dired-listing-switches "-al --group-directories-first")
  (shr-discard-aria-hidden t)  ; don't render "hidden" tags on webpages

  ;; Sauvegardes & co
  (backup-by-copying t)      ; don't clobber symlinks
  (backup-directory-alist `(("." . ,my/backup-directory)))    ; don't litter my fs tree
  (delete-old-versions t)
  (kept-new-versions 6)
  (kept-old-versions 2)
  (version-control t)       ; use versioned backups
  ;; (auto-save-file-name-transforms '((".*" my/backup-directory t)))

  ;; desktop save path
  (desktop-path (list my/cache-directory))

  ;; spécificités use-package (si + à jour sur ELPA, go for it)
  (package-install-upgrade-built-in t)
  (use-package-always-ensure t)

  ;; tabs
  (tab-width 4 "Always tab 4 spaces.")
  (indent-tabs-mode t "Défaut mais pour rappel.")

  ;; recentf
  (recentf-max-menu-items 20)
  (recentf-max-saved-items 20)

  :config
  ;; Ido ( instead of ivy & counsel & swiper)
  (setq-default ido-auto-merge-work-directories-length -1
	            ido-enable-flex-matching t
	            isearch-lazy-count t
	            lazy-count-prefix-format "%s/%s: ")
  (setq completion-ignored-extensions '(".o" ".elc" "~" ".bin" ".bak" ".obj" ".map" ".a" ".ln" ".class")
        completion-styles '(basic flex)
        completion-auto-select t ;; Show completion on first call
        completion-auto-help 'visible ;; Display *Completions* upon first request
        completions-format 'one-column ;; Use only one column
        completions-sort 'historical ;; Order based on minibuffer history
        completions-max-height 20 ;; Limit completions to 15 (completions start at line 5)
        completion-ignore-case t)


  :init
  ;; Je n'utilise pas les éléments graphiques
  (menu-bar-mode -1) ; ni barre de menu
  (tool-bar-mode -1) ; ni la barre d'outils
  (scroll-bar-mode -1) ; ni la barre de défilement
  ;; mais
  (column-number-mode) ; j'aime bien avoir le numéro de la colonne
  (show-paren-mode)    ; ... avoir les parenthèses correspondantes
  (global-hl-line-mode t)               ; surligner la ligne en cours
  (global-display-line-numbers-mode 1)  ; afficher le numéro de la ligne
  (size-indication-mode t)              ; donner une indication de la taille du buffer
  (blink-cursor-mode -1)                ; inutile de clignoter

  (electric-pair-mode)                  ; créer des pairs de (), {}, etc.

  (ido-mode)
  (ido-everywhere)

  (fset 'yes-or-no-p 'y-or-n-p)         ; y/n est ok

  (abbrev-mode t)
  (global-auto-revert-mode t)           ; basculer à la demande sur des versions éditées ailleurs que dans emacs si le cas se présente
  (savehist-mode)                       ; sauvegarde de l'historique du minibuffer

  (save-place-mode 1)
  (recentf-mode 1)
  ;; (set-frame-font "Iosevka Semibold 12" nil t) ;; font of the century

  (desktop-save-mode)
  (desktop-read)

  (icomplete-vertical-mode t)

  (fido-mode t)

  :bind (
         ("C-x C-c" . nil)              ; beaucoup trop d'erreurs
         ("C-x C-c C-c" . save-buffers-kill-emacs) ; beaucoup mieux

         ;; Effective Emacs
         ("C-x C-m" . execute-extended-command) ; très malin, Alt-x est trop dépendant de l'OS
         ("C-c C-m" . execute-extended-command) ; solution de secours

         ;; NIL
         ("C-x C-d" . nil) ; never use it
         ("C-x C-v" . nil) ; never use it
         ("C-z" . nil) ; I have a window manager, thanks!
         ("C-x C-z" . nil) ; same idea as above
         ("C-h h" . nil) ; Never show that "hello" file
         ("M-`" . nil)

         ("C-x C-r" . restart-emacs) ; override `find-file-read-only'
         ("M-o" . delete-blank-lines) ; alias for C-x C-o
         ("M-SPC" . cycle-spacing)
         ("M-z" . zap-up-to-char) ; NOT `zap-to-char'
         ("M-c" . capitalize-dwim)
         ("M-l" . downcase-dwim) ; "lower" case
         ("M-u" . upcase-dwim)
         ("M-=" . count-words)
         ("C-x O" . next-multiframe-window)
         ("C-h K" . describe-keymap) ; overrides `Info-goto-emacs-key-command-node'
         ("C-h u" . apropos-user-option)
         ("C-h F" . apropos-function) ; lower case is `describe-function'
         ("C-h V" . apropos-variable) ; lower case is `describe-variable'
         ("C-h L" . apropos-library) ; lower case is `view-lossage'
         ("C-h c" . describe-char) ; overrides `describe-key-briefly'

         ("C-x k" . kill-current-buffer)
         ;; ("C-x C-c" . nano-kill)        ;
         ("C-x C-r" . recentf-open)
         ;; ("C-g" . nano-quit)
         ("M-n" . make-frame)
         ("C-z" . nil) ;; No suspend frame
         ("C-<wheel-up>" . nil) ;; No text resize via mouse scroll
         ("C-<wheel-down>" . nil) ;
         )
  )


;;; Prot is in Da Place (thank you Prot!!)
(setq custom-safe-themes t)
;; (load-theme 'modus-operandi-tinted)


(defun pulse-save-buffers (&rest args)
  (save-some-buffers t)
  (pulse-momentary-highlight-one-line (point)))

;; auto save when frame lose focus, Alt-Tab
(add-function :after after-focus-change-function #'pulse-save-buffers)
;; auto save when buffer changed
(dolist (command '(other-window
                   switch-to-buffer
                   next-buffer
                   previous-buffer))
  (advice-add command :after #'pulse-save-buffers))



;; lin: https://protesilaos.com/emacs/lin
(require 'lin)
(setq lin-face 'lin-cyan)
(add-hook 'after-init-hook 'lin-global-mode)

;;;; curosry: https://protesilaos.com/emacs/cursory
(require 'cursory)

;; Check the `cursory-presets' for how to set your own preset styles.

(setq cursory-latest-state-file
      (expand-file-name "cursory-latest" my/state-directory))

;; Set last preset or fall back to desired style from `cursory-presets'.
(cursory-set-preset (or (cursory-restore-latest-preset) 'bar))

;; Arrange to keep track of the latest Cursory preset.
(cursory-mode 1)

;; We have to use the "point" mnemonic, because C-c c is often the
;; suggested binding for `org-capture'.
(define-key global-map (kbd "C-c p") #'cursory-set-preset)

;; spacious-padding: https://protesilaos.com/emacs/spacious-padding
;; prettify emacs by much
(require 'spacious-padding)
(setq spacious-padding-subtle-mode-line
      '( :mode-line-active spacious-padding-subtle-mode-line-active
         :mode-line-inactive spacious-padding-subtle-mode-line-inactive))
;;(add-hook 'after-init-hook 'spacious-padding-mode)

;;;; Fontaine: https://protesilaos.com/emacs/fontaine
(require 'fontaine)
(setq fontaine-latest-state-file
      (expand-file-name "fontaine-latest" my/state-directory))
(fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
(define-key global-map (kbd "C-c f") #'fontaine-set-preset)
(fontaine-mode 1)

;; Pas sûr
(require 'face-remap)
(define-key global-map (kbd "C-x x v") 'variable-pitch-mode)
(define-key global-map (kbd "C-x C-=") 'global-text-scale-adjust)
(define-key global-map (kbd "C-x C-+") 'global-text-scale-adjust)
(define-key global-map (kbd "C-x C-0") 'global-text-scale-adjust)

(when (memq system-type '(darwin))
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta) ;; Comment faire sans ?
  )

(define-key y-or-n-p-map [return] 'act)
;;; POUBELLE

(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/") ; MacOS

;;; MAIL

(defvar my/rmail-folder (expand-file-name "~/.local/share/mail/"))
(defvar my/inmail-folder (expand-file-name "~/.local/share/mail/in/"))
(defvar my/dl-folder (expand-file-name "~/.local/cache/emacs/"))

(setq rmail-delete-after-output t)
(setq rmail-preserve-inbox nil)

(setq rmail-remote-password-required t)
(setq rmail-file-name (expand-file-name "inbox.rmail" my/inmail-directory))

;; Tricking the system
;; UGLY UGLY UGLY
(setq rmail-remote-password
      (let ((auth-info (car (auth-source-search ; I DO NOT LIKE THAT (that should be simpler)
                             :host "mail.galae.net" ; DO NOT EXPOSE THIS PLEASE
                             :max 1))))
        (when auth-info
          (let ((secret (plist-get auth-info :secret)))
            (if (functionp secret)
                (funcall secret)
              secret)))))
(setq rmail-displayed-headers "^\\(?:Cc\\|Date\\|From\\|Subject\\|To\\|Sender\\):")
(setq mail-default-headers (format-time-string (concat "FCC: " (expand-file-name "%Y-out.rmail" my/outmail-directory))))

;; (setq rmail-primary-inbox-list '("maildir://~/.local/share/mail/galae/INBOX"))

(setq rmail-mime-attachment-dirs-alist `((".*" ,my/cache-directory)))

(setq rmail-automatic-folder-directives	; Quelques règles de rangement automatique pour faire du Inbox 0 artisanal
      `((,(expand-file-name "xavier.rmail" my/inmail-directory) "to" "xavier@maillard.im")
	    (,(expand-file-name "bug-gnu-emacs.rmail" my/inmail-directory) "sender" "bug-gnu-emacs-bounces")
	    (,(expand-file-name "devel-gnu-emacs.rmail" my/inmail-directory) "sender" "emacs-devel-bounces")
	    (,(expand-file-name "help-gnu-emacs.rmail" my/inmail-directory) "sender" "help-gnu-emacs-bounces")
        (,(expand-file-name "users-gnu-hyperbole.rmail" my/inmail-directory) "sender" "hyperbole-users-bounces")))

(setq rmail-secondary-file-directory (file-name-as-directory my/inmail-directory))
(setq rmail-secondary-file-regexp "^.*\\.rmail$")

(add-to-list 'auto-mode-alist '("\\.rmail$" . rmail-mode))

(global-set-key (kbd "C-c r") '(lambda ()
				                 (interactive)
				                 (let ((current-prefix-arg '(4)))
				                   (call-interactively #'rmail))))
(global-set-key (kbd "C-c R") 'rmail)

;; TODO: mairix ?

;; Simple et basique: msmtp fait le boulot. FIN
(setq send-mail-function 'sendmail-send-it)
(setq sendmail-program (executable-find "msmtp")) ;

;;; NOTES TAKING
(add-to-list 'load-path "~/Git/Projets/records/src")
(require 'records)

(require 'howm)
(setq howm-view-use-grep t)
(setq howm-view-grep-command "rg")
(setq howm-view-grep-option "-nH --no-heading --color never")
(setq howm-view-grep-extended-option nil)
(setq howm-view-grep-fixed-option "-F")
(setq howm-view-grep-expr-option nil)
(setq howm-view-grep-file-stdin-option nil)

;; Where to store data.
(setq howm-directory "~/Documents/howm")
(setq howm-home-directory howm-directory)
(setq howm-keyword-file (expand-file-name ".howm-keys" howm-home-directory))
(setq howm-history-file (expand-file-name ".howm-history" howm-home-directory))
(setq howm-menu-lang "en")

;; counsel-rg for howm
(defun howm-list--counsel-rg (match)
  (if (string= match "")
      (howm-list-all)
    (if (or (null ivy--old-cands)
	        (equal ivy--old-cands '("No matches found")))
        (message "No match")
      (let ((howm-view-use-grep
	         #'(lambda (str file-list &optional fixed-p force-case-fold)
                 (mapcar
                  (lambda (cand)
		            (if (string-match "\\`\\(.*\\):\\([0-9]+\\):\\(.*\\)\\'" cand)
                        (let ((file (match-string-no-properties 1 cand))
			                  (line (match-string-no-properties 2 cand))
			                  (match-line (match-string-no-properties 3 cand)))
                          (list (expand-file-name file howm-directory)
                                (string-to-number line)
                                match-line))))
                  ivy--old-cands))))
        (howm-search ivy--old-re t)
        (riffle-set-place
         (1+ (cl-position match ivy--old-cands :test 'string=)))))))

(defun howm-counsel-rg ()
  "Interactively grep for a string in your howm notes using rg."
  (interactive)
  (let ((default-directory howm-directory)
        (counsel-ag-base-command counsel-rg-base-command)
        (counsel-ag-command (counsel--format-ag-command "--glob=!*~" "%s")))
    (ivy-read "Search all (rg): "
	          #'counsel-ag-function
	          :dynamic-collection t
	          :keymap counsel-ag-map
	          :action #'howm-list--counsel-rg
	          :require-match t
	          :caller 'counsel-rg)))

(define-key global-map (concat howm-prefix "r") 'howm-counsel-rg)
(define-key howm-menu-mode-map "\C-h" nil)
(define-key riffle-summary-mode-map "\C-h" nil)
(define-key howm-view-contents-mode-map "\C-h" nil)

;; Default recent to sorting by mtime
(advice-add 'howm-list-recent :after #'howm-view-sort-by-mtime)
;; Default all to sorting by creation, newest first
(advice-add 'howm-list-all :after #'(lambda () (howm-view-sort-by-date t)))

;; Rename buffers to their title
(add-hook 'howm-mode-hook 'howm-mode-set-buffer-name)
(add-hook 'after-save-hook 'howm-mode-set-buffer-name)

;; GNU hyperbole

(use-package hyperbole
  :init
  (hyperbole-mode 1)
  )


;; MODES
;; Life
;; (info "(emacs) Calendar/Diary")
(require 'calendar)
(require 'diary-lib)
(require 'french-holidays)
(require 'appt)
(require 'prot-diary)

(setq diary-file (format-time-string (expand-file-name "diary-%Y" my/cache-directory)))
(setq diary-display-function #'diary-fancy-display)
(setq diary-date-forms diary-iso-date-forms)
(setq diary-comment-start ";;")
(setq diary-comment-end "")
(setq diary-nonmarking-symbol "!")

(setq diary-header-line-format nil)
(setq diary-list-include-blanks nil)
(setq diary-number-of-entries 2)
(setq diary-mail-days 2)
(setq diary-abbreviated-year-flag nil)

(add-hook 'diary-list-entries-hook #'diary-include-other-diary-files)
(add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)
(add-hook 'diary-list-entries-hook #'diary-sort-entries t)
(add-hook 'calendar-today-visible-hook #'calendar-mark-today)

(setq calendar-mode-line-format nil)
(setq calendar-time-display-form
      '(24-hours ":" minutes
                 (when time-zone
                   (format "(%s)" time-zone))))

(setq calendar-date-style 'iso)
(setq calendar-date-display-form calendar-iso-date-display-form)
(setq calendar-time-zone-style 'numeric)
(setq calendar-week-start-day 1  	; lundi
      calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                               "Jeudi" "Vendredi" "Samedi"]
      calendar-month-name-array ["Janvier" "Février" "Mars" "Avril" "Mai"
                                 "Juin" "Juillet" "Août" "Septembre"
                                 "Octobre" "Novembre" "Décembre"])
(setq calendar-holidays holiday-french-holidays)
(setq diary-show-holidays-flag t)
(setq diary-date-forms diary-american-date-forms)
(setq calendar-mark-diary-entries-flag t
      calendar-mark-holidays-flag t)	; affiche automatiquement les entrées diary et les vacances dans calendar

(setq appt-display-diary nil)
(setq appt-disp-window-function #'appt-disp-window)
(setq appt-display-mode-line t)
(setq appt-display-interval 3)
(setq appt-audible nil)
(setq appt-warning-time-regexp "appt \\([0-9]+\\)")
(setq appt-message-warning-time 15)
(appt-activate 1)

(let ((map calendar-mode-map))
  (define-key map (kbd "s") #'calendar-sunrise-sunset)
  (define-key map (kbd "l") #'lunar-phases)
  (define-key map (kbd "i") nil) ; Org sets this, much to my chagrin
  (define-key map (kbd "i a") #'diary-insert-anniversary-entry)
  (define-key map (kbd "i c") #'diary-insert-cyclic-entry)
  (define-key map (kbd "i d") #'diary-insert-entry) ; for current "day"
  (define-key map (kbd "i i") #'diary-insert-entry) ; most common action, easier to type
  (define-key map (kbd "i m") #'diary-insert-monthly-entry)
  (define-key map (kbd "i w") #'diary-insert-weekly-entry)
  (define-key map (kbd "i y") #'diary-insert-yearly-entry)
  (define-key map (kbd "M-n") #'calendar-forward-month)
  (define-key map (kbd "M-p") #'calendar-backward-month))

(let ((map diary-mode-map))
  (define-key map (kbd "<M-return>") #'prot-diary-newline-indent)
  (define-key map (kbd "M-n") #'prot-diary-heading-next)
  (define-key map (kbd "M-p") #'prot-diary-heading-previous)
  (define-key map (kbd "C-c C-a") #'prot-diary-align-timestamped-entries))
(let ((map global-map))
  (define-key map (kbd "C-c d a") #'prot-diary-insert-appointment)
  (define-key map (kbd "C-c d c") #'calendar)
  (define-key map (kbd "C-c d d") #'prot-diary-display-entries)
  (define-key map (kbd "C-c d e") #'prot-diary-edit-diary)
  (define-key map (kbd "C-c d i") #'prot-diary-insert-entry)
  (define-key map (kbd "C-c d m") #'prot-diary-mail-entries))

;; which-key
(use-package which-key
  :config
  (setq which-key-separator "  ")
  (setq which-key-prefix-prefix "... ")
  (setq which-key-max-display-columns 3)
  (setq which-key-idle-delay 1.5)
  (setq which-key-idle-secondary-delay 0.25)
  (setq which-key-add-column-padding 1)
  (setq which-key-max-description-length 40)
  :hook
  (after-init . which-key-mode))

;; HOOKS

                                        ; Clean trailing whitespace before saving:
;; (add-to-list 'write-file-functions 'delete-trailing-whitespace)

(add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "E")))
(add-hook 'lisp-interaction-mode-hook (lambda () (setq mode-name "LI")))
(add-hook 'after-init-hook 'global-auto-revert-mode)
(add-hook 'after-init-hook 'delete-selection-mode)

                                        ; (use-package vertico }
                                        ;   :config (vertico-mode)) }

                                        ; (use-package marginalia }
                                        ;   :demand }
                                        ;   :config (marginalia-mode) }
                                        ;   :bind (:map minibuffer-local-map }
                                        ;               ("M-A" . marginalia-cycle))) }

                                        ; (use-package orderless }
                                        ;   :custom }
                                        ;   (completion-styles '(orderless basic))) }

(use-package consult
  :bind (("C-c M-x" . consult-mode-command)
         ("C-c i" . consult-info)
         ([remap repeat-complex-command] . consult-complex-command)
         ([remap switch-to-buffer] . consult-buffer)
         ([remap bookmark-jump] . consult-bookmark)
         ([remap project-switch-to-buffer] . consult-project-buffer)
         ("s-t" . consult-register-load)
         ("s-T" . consult-register-store)
         ("C-s-t" . consult-register)
         ([remap yank-pop] . consult-yank-pop)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ([remap goto-line] . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ([remap isearch-edit-string] . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<")
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args))))

;; FINAL
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
                                        ; (require 'nano)                         ;\!;\ }

;; (load-file "~/.emacs.d/elisp/nano256.el")
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

;; ibuffer
(use-package ibuffer
  :init (defalias 'list-buffers 'ibuffer))


;; Line Number
;; this package introduced in Emacs 26, so only enabled when 26+
(use-package display-line-numbers
  :if (> emacs-major-version 26)
  :hook (prog-mode . display-line-numbers-mode))

;; Parentheses
(use-package paren
  :ensure nil
  :config (setq-default show-paren-style 'mixed
                        show-paren-when-point-inside-paren t
                        show-paren-when-point-in-periphery t)
  :hook (prog-mode . show-paren-mode))


;; Diminish Builtins
(dolist (elem '(abbrev-mode eldoc-mode))
  (diminish elem))
(add-hook 'hs-minor-mode-hook (lambda () (diminish 'hs-minor-mode)))

(use-package format-all
  :diminish " Fmt."
  :init (add-hook 'prog-mode-hook 'format-all-mode))
(use-package crux)

;; (global-set-key (kbd "C-c ,") #'crux-find-user-init-file)	; Open Settings
;; (global-set-key (kbd "C-c r") 'recentf-open-files) ; Open Recent Files

;; Window Move
(global-set-key (kbd "C-c <left>") 'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>") 'windmove-up)
(global-set-key (kbd "C-c <down>") 'windmove-down)

;;; Code Editing ------------------------------
;; Comments（As C-x C-; is for comment-line, keep the postfix）
;; (global-set-key (kbd "C-c C-;") #'comment-or-uncomment-region)
;; ;; Line Edit
;; (global-set-key (kbd "M-<down>") #'drag-stuff-down)
;; (global-set-key (kbd "M-<up>") #'drag-stuff-up)
;; (global-set-key (kbd "C-c C-d") #'crux-duplicate-current-line-or-region)
;; (global-set-key (kbd "C-a") #'crux-move-beginning-of-line)

;; Settings for exec-path-from-shell
(use-package exec-path-from-shell
  :defer nil
  :if (memq window-system '(mac ns x))
  :init (exec-path-from-shell-initialize))

;; format all, formatter for almost languages
;; great for programmers
(use-package format-all
  :diminish
  :hook (prog-mode . format-all-ensure-formatter)
  :bind (("C-c f" . #'format-all-buffer)))

;; hungry delete, delete many spaces as one
(use-package hungry-delete
  :diminish
  :hook (after-init . global-hungry-delete-mode))

;; move-text, move line or region with M-<up>/<down>
(use-package move-text
  :hook (after-init . move-text-default-bindings))

;; Utilitaires
;; midnight
;; auto-destruction des vieux buffers
(use-package midnight
  :ensure nil                           ;builtin}
  :hook (after-init . midnight-mode))

;; lecture RSS
(use-package newsticker
  :ensure nil                           ;builtin}
  :bind ("C-c w n" . fg-feeds)
  :init
  (let ((file (expand-file-name "feeds.el" my/cache-directory)))
	(when (file-exists-p file)
	  (load file)))

  :config
  (defun fg-feeds ()
	"Start newsticker feed fetching and ticker or
activate newsticker layout (and reset ticker) if it's already started."
	(interactive)
	(if (newsticker-running-p)
		(let ((win (newsticker--treeview-list-window))) ; return current window if there's none
		  (if
			  (and (window-live-p win)
				   (string-match "Newsticker" (buffer-name (window-buffer win))))
			  (progn
				(newsticker-treeview-quit)
				(newsticker--ticker-text-setup)) ; reset ticker, since news are displayed already
			(newsticker-show-news)))
	  (newsticker-start)
	  (newsticker-start-ticker)))
  
  ;; No idea why, but it looks like newsticker--treeview-windows contains
  ;;  some dead window in place of proper treeview-list, temporary workaround
  (defadvice newsticker--treeview-list-window
	  (around fg-newsticker--treeview-list-window activate)
	ad-do-it
	(unless (window-live-p ad-return-value)
	  (dolist (win (get-buffer-window-list (newsticker--treeview-list-buffer)))
		(when (window-live-p win) (setq ad-return-value win)))))
  ;; newsticker--selection-overlay is also "in no buffer"-broken because of that,
  ;;  so selection position is always unset in treeview-list, and set-window-point is never called
  ;; This hack just always sets it to the beginning of the buffer
  (defadvice newsticker--treeview-list-feed-items
	  (after fg-newsticker--treeview-list-feed-items activate)
	(set-window-point (newsticker--treeview-list-window) 0))
  
  
  ;; Advice replaces frame-width function, just for newsticker--display-scroll
  ;;  invocation with a custom one - frame-width-static, leaving the old def backed-up
  ;; Intended usage is frame with variable-pitch font, where width can't be set reliably
  (defun frame-width-custom (&optional frame) (round (frame-width-real) 1.2))
  (fset 'frame-width-real (symbol-function 'frame-width))
  (defadvice newsticker--display-scroll
	  (around fg-newsticker--display-scroll activate)
	(fset 'frame-width (symbol-function 'frame-width-custom))
	ad-do-it
	(fset 'frame-width (symbol-function 'frame-width-real)))
  
  :custom
  (newsticker-frontend 'newsticker-treeview)
  (newsticker-dir my/cache-directory)
  (newsticker-treeview-treeview-window 45)
  (newsticker-treeview-listwindow-height 30)
  (newsticker-url-list-defaults nil)
  (newsticker-retrieval-interval (* 4 3600))
  
  (newsticker-automatically-mark-items-as-old nil)
  (newsticker-automatically-mark-visited-items-as-old t)
  (newsticker-obsolete-item-max-age (* 30 24 3600))
  
  (newsticker-ticker-interval 0.3)
  (newsticker-scroll-smoothly t)
  (newsticker-hide-immortal-items-in-echo-area t)
  (newsticker-hide-obsolete-items-in-echo-area t)
  
  (newsticker-html-renderer 'shr)
  (newsticker-date-format "(%H:%M, %A %d.%m)")
  
  (newsticker-treeview-own-frame nil))

(use-package elfeed

  :bind ("C-c w e" . elfeed)
  :custom
  (elfeed-use-curl nil)
  (elfeed-curl-max-connections 10)
  (elfeed-db-directory (expand-file-name "rss" my/cache-directory))
  (elfeed-enclosure-default-dir "~/Downloads/")
  (elfeed-search-filter "@2-weeks-ago +unread")
  (elfeed-sort-order 'descending)
  (elfeed-search-clipboard-type 'CLIPBOARD)
  (elfeed-search-title-max-width 100)
  (elfeed-search-title-min-width 30)
  (elfeed-search-trailing-width 25)
  (elfeed-show-truncate-long-urls t)
  (elfeed-show-unique-buffers t)
  (elfeed-search-date-format '("%F %R" 16 :left))
  :hook
  (elfeed-show-mode . visual-line-mode)

  :bind
  (
   :map elfeed-search-mode-map
		("w" . elfeed-search-yank)
		("g" . elfeed-update)
		("G" . elfeed-search-update--force)
		:map elfeed-show-mode-map
		("w" . elfeed-show-yank)
		)
  )

(use-package elfeed-org
  :custom
  (rmh-elfeed-org-files (list "~/Documents/feeds.org"))
  :config
  (elfeed-org)

)

(use-package elfeed-score
  :after elfeed
  :custom
  (elfeed-score-serde-score-file (expand-file-name "elfeed.score" my/cache-directory))
  (elfeed-score-rule-stats-file (expand-file-name "elfeed.stats" my/cache-directory))
  :config
  (setq elfeed-search-print-entry-function #'elfeed-score-print-entry)
  (elfeed-score-enable)
  
  :bind (:map elfeed-search-mode-map
			  ("=" . elfeed-score-map))
  )

;; (use-package cus-edit
;;   :demand t
;;   :custom
;;   (custom-file (expand-file-name "custom.el" user-emacs-directory))
;;   :init
;;   (when (file-exists-p custom-file)
;;     (load custom-file)))

(require 'server)
(setq server-client-instructions nil)
(unless (server-running-p)
  (server-start))

                                        ; (setopt }
                                        ;  display-buffer-base-action }
                                        ;  '((display-buffer-reuse-window display-buffer-same-window }
                                        ;                                 display-buffer-in-previous-window }
                                        ;                                 display-buffer-use-some-window))) }

;; (setq default-frame-alist '((width . 800) (height . 55) (menu-bar-lines . 1)))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 '(org-fold-core-style 'overlays)
 '(package-selected-packages
   '(agitate altcaps beframe breadcrumb consult-denote corfu crux
			 csv-mode cursory diminish dired-preview dired-subtree
			 elfeed elfeed-org elfeed-score embark-consult
			 exec-path-from-shell expreg fontaine format-all goto-chg
			 howm hungry-delete hyperbole keycast lin logos marginalia
			 markdown-mode modus-themes move-text notmuch-indicator
			 ol-notmuch olivetti orderless package-lint-flymake pass
			 pulsar rainbow-mode ready-player show-font
			 spacious-padding substitute sxhkdrc-mode theme-buffet tmr
			 trashed vertico)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
